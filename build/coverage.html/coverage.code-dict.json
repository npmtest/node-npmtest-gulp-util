{"/home/travis/build/npmtest/node-npmtest-gulp-util/test.js":"/* istanbul instrument in package npmtest_gulp_util */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-gulp-util/lib.npmtest_gulp_util.js":"/* istanbul instrument in package npmtest_gulp_util */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_gulp_util = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_gulp_util = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-gulp-util/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-gulp-util && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_gulp_util */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_gulp_util\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_gulp_util.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        local.assetsDict['/assets.npmtest_gulp_util.rollup.js'] =\n            local.assetsDict['/assets.npmtest_gulp_util.rollup.js'] ||\n            local.fs.readFileSync(\n                // buildCustomOrg-hack\n                local.npmtest_gulp_util.__dirname +\n                    '/lib.npmtest_gulp_util.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-gulp-util/gulp-util/index.js":"module.exports = {\n  File: require('vinyl'),\n  replaceExtension: require('replace-ext'),\n  colors: require('chalk'),\n  date: require('dateformat'),\n  log: require('./lib/log'),\n  template: require('./lib/template'),\n  env: require('./lib/env'),\n  beep: require('beeper'),\n  noop: require('./lib/noop'),\n  isStream: require('./lib/isStream'),\n  isBuffer: require('./lib/isBuffer'),\n  isNull: require('./lib/isNull'),\n  linefeed: '\\n',\n  combine: require('./lib/combine'),\n  buffer: require('./lib/buffer'),\n  PluginError: require('./lib/PluginError')\n};\n","/home/travis/build/npmtest/node-npmtest-gulp-util/gulp-util/lib/log.js":"var hasGulplog = require('has-gulplog');\n\nmodule.exports = function(){\n  if(hasGulplog()){\n    // specifically deferring loading here to keep from registering it globally\n    var gulplog = require('gulplog');\n    gulplog.info.apply(gulplog, arguments);\n  } else {\n    // specifically defering loading because it might not be used\n    var fancylog = require('fancy-log');\n    fancylog.apply(null, arguments);\n  }\n  return this;\n};\n","/home/travis/build/npmtest/node-npmtest-gulp-util/gulp-util/lib/template.js":"var template = require('lodash.template');\nvar reEscape = require('lodash._reescape');\nvar reEvaluate = require('lodash._reevaluate');\nvar reInterpolate = require('lodash._reinterpolate');\n\nvar forcedSettings = {\n  escape: reEscape,\n  evaluate: reEvaluate,\n  interpolate: reInterpolate\n};\n\nmodule.exports = function(tmpl, data) {\n  var fn = template(tmpl, forcedSettings);\n\n  var wrapped = function(o) {\n    if (typeof o === 'undefined' || typeof o.file === 'undefined') {\n      throw new Error('Failed to provide the current file as \"file\" to the template');\n    }\n    return fn(o);\n  };\n\n  return (data ? wrapped(data) : wrapped);\n};\n","/home/travis/build/npmtest/node-npmtest-gulp-util/gulp-util/lib/env.js":"var parseArgs = require('minimist');\nvar argv = parseArgs(process.argv.slice(2));\n\nmodule.exports = argv;\n","/home/travis/build/npmtest/node-npmtest-gulp-util/gulp-util/lib/noop.js":"var through = require('through2');\n\nmodule.exports = function () {\n  return through.obj();\n};\n","/home/travis/build/npmtest/node-npmtest-gulp-util/gulp-util/lib/isStream.js":"var Stream = require('stream').Stream;\n\nmodule.exports = function(o) {\n  return !!o && o instanceof Stream;\n};\n","/home/travis/build/npmtest/node-npmtest-gulp-util/gulp-util/lib/isBuffer.js":"var buf = require('buffer');\nvar Buffer = buf.Buffer;\n\n// could use Buffer.isBuffer but this is the same exact thing...\nmodule.exports = function(o) {\n  return typeof o === 'object' && o instanceof Buffer;\n};\n","/home/travis/build/npmtest/node-npmtest-gulp-util/gulp-util/lib/isNull.js":"module.exports = function(v) {\n  return v === null;\n};\n","/home/travis/build/npmtest/node-npmtest-gulp-util/gulp-util/lib/combine.js":"var pipeline = require('multipipe');\n\nmodule.exports = function(){\n  var args = arguments;\n  if (args.length === 1 && Array.isArray(args[0])) {\n    args = args[0];\n  }\n  return function(){\n    return pipeline.apply(pipeline, args);\n  };\n};\n","/home/travis/build/npmtest/node-npmtest-gulp-util/gulp-util/lib/buffer.js":"var through = require('through2');\n\nmodule.exports = function(fn) {\n  var buf = [];\n  var end = function(cb) {\n    this.push(buf);\n    cb();\n    if(fn) fn(null, buf);\n  };\n  var push = function(data, enc, cb) {\n    buf.push(data);\n    cb();\n  };\n  return through.obj(push, end);\n};\n","/home/travis/build/npmtest/node-npmtest-gulp-util/gulp-util/lib/PluginError.js":"var util = require('util');\nvar arrayDiffer = require('array-differ');\nvar arrayUniq = require('array-uniq');\nvar chalk = require('chalk');\nvar objectAssign = require('object-assign');\n\nvar nonEnumberableProperties = ['name', 'message', 'stack'];\nvar propertiesNotToDisplay = nonEnumberableProperties.concat(['plugin', 'showStack', 'showProperties', '__safety', '_stack']);\n\n// wow what a clusterfuck\nvar parseOptions = function(plugin, message, opt) {\n  opt = opt || {};\n  if (typeof plugin === 'object') {\n    opt = plugin;\n  } else {\n    if (message instanceof Error) {\n      opt.error = message;\n    } else if (typeof message === 'object') {\n      opt = message;\n    } else {\n      opt.message = message;\n    }\n    opt.plugin = plugin;\n  }\n\n  return objectAssign({\n    showStack: false,\n    showProperties: true\n  }, opt);\n};\n\nfunction PluginError(plugin, message, opt) {\n  if (!(this instanceof PluginError)) throw new Error('Call PluginError using new');\n\n  Error.call(this);\n\n  var options = parseOptions(plugin, message, opt);\n  var self = this;\n\n  // if options has an error, grab details from it\n  if (options.error) {\n    // These properties are not enumerable, so we have to add them explicitly.\n    arrayUniq(Object.keys(options.error).concat(nonEnumberableProperties))\n      .forEach(function(prop) {\n        self[prop] = options.error[prop];\n      });\n  }\n\n  var properties = ['name', 'message', 'fileName', 'lineNumber', 'stack', 'showStack', 'showProperties', 'plugin'];\n\n  // options object can override\n  properties.forEach(function(prop) {\n    if (prop in options) this[prop] = options[prop];\n  }, this);\n\n  // defaults\n  if (!this.name) this.name = 'Error';\n\n  if (!this.stack) {\n    // Error.captureStackTrace appends a stack property which relies on the toString method of the object it is applied to.\n    // Since we are using our own toString method which controls when to display the stack trace if we don't go through this\n    // safety object, then we'll get stack overflow problems.\n    var safety = {\n      toString: function() {\n        return this._messageWithDetails() + '\\nStack:';\n      }.bind(this)\n    };\n    Error.captureStackTrace(safety, arguments.callee || this.constructor);\n    this.__safety = safety;\n  }\n\n  if (!this.plugin) throw new Error('Missing plugin name');\n  if (!this.message) throw new Error('Missing error message');\n}\n\nutil.inherits(PluginError, Error);\n\nPluginError.prototype._messageWithDetails = function() {\n  var messageWithDetails = 'Message:\\n    ' + this.message;\n  var details = this._messageDetails();\n\n  if (details !== '') {\n    messageWithDetails += '\\n' + details;\n  }\n\n  return messageWithDetails;\n};\n\nPluginError.prototype._messageDetails = function() {\n  if (!this.showProperties) {\n    return '';\n  }\n\n  var properties = arrayDiffer(Object.keys(this), propertiesNotToDisplay);\n\n  if (properties.length === 0) {\n    return '';\n  }\n\n  var self = this;\n  properties = properties.map(function stringifyProperty(prop) {\n    return '    ' + prop + ': ' + self[prop];\n  });\n\n  return 'Details:\\n' + properties.join('\\n');\n};\n\nPluginError.prototype.toString = function () {\n  var sig = chalk.red(this.name) + ' in plugin \\'' + chalk.cyan(this.plugin) + '\\'';\n  var detailsWithStack = function(stack) {\n    return this._messageWithDetails() + '\\nStack:\\n' + stack;\n  }.bind(this);\n\n  var msg;\n  if (this.showStack) {\n    if (this.__safety) { // There is no wrapped error, use the stack captured in the PluginError ctor\n      msg = this.__safety.stack;\n    } else if (this._stack) {\n      msg = detailsWithStack(this._stack);\n    } else { // Stack from wrapped error\n      msg = detailsWithStack(this.stack);\n    }\n  } else {\n    msg = this._messageWithDetails();\n  }\n\n  return sig + '\\n' + msg;\n};\n\nmodule.exports = PluginError;\n"}